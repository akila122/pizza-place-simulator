#!/usr/bin/env node

require("dotenv").config()

fs = require("fs")
const { logInfo, logError } = require("../logger")

const app = require("../app")
const http = require("http")
const mongoose = require("mongoose")

const { port, dbUri, seedPath, ORDERS_LIMIT } = require("../config")
const { OrderSemaphore } = require("../models")

async function main() {
  try {
    await mongoose.connect(dbUri, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      useFindAndModify: false,
      useCreateIndex: true,
    })
    logInfo("Connected to DB")

    await seedIngredients()

    await setupOrderLimit()

    const db = mongoose.connection
    app.set("db", db)
    app.set("port", port)
    const server = http.createServer(app)
    server.listen(port)
    server.on("error", onError)
    server.on("listening", onListening)
    server.on("close", onClose)

    process.on("SIGINT", function () {
      server.close()
    })
  } catch (e) {
    logError(e)
    process.exit(2)
  }
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port

  switch (error.code) {
    case "EACCES":
      logError(bind + " requires elevated privileges")
      process.exit(1)
    case "EADDRINUSE":
      logError(bind + " is already in use")
      process.exit(1)
    default:
      throw error
  }
}

function onClose() {
  logInfo("Server closing")
  mongoose.disconnect()
}

function onListening() {
  logInfo("Server started")
}

async function seedIngredients() {
  const Ingredient = require("../models").Ingredient
  ingredients = await Ingredient.find({}).exec()
  if (!ingredients.length) {
    const dataBuffer = fs.readFileSync(seedPath)
    const ingredientsData = JSON.parse(dataBuffer)
    await Ingredient.collection.insertMany(ingredientsData)
    logInfo("Ingredients insreted")
  }
}

async function setupOrderLimit(){
    orderSemaphore = await OrderSemaphore.findOne({}).exec()
    if (!orderSemaphore){
      orderSemaphore = new OrderSemaphore({count:ORDERS_LIMIT})
      await orderSemaphore.save()
      logInfo("Order semaphore insreted")
    }
}

main()
